# -*- coding: utf-8 -*-
"""Content-based Filtering_Dicky Ary Setiawan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-ib7VwDAYanyt50SuGEaAAp_4fYdANrU

- **Nama:** Dicky Ary Setiawan
- **Email:** DickyAry54@gmail.com
- **ID Dicoding:** ruhe54

# **1. Import Library**

Pada tahap ini, Anda perlu mengimpor beberapa pustaka (library) Python yang dibutuhkan untuk analisis data dan pembangunan model machine learning.
"""

import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import matplotlib.pyplot as plt
import seaborn as sns

"""# 2. Memuat Dataset

Memuat dataset hasil clustering dari file CSV ke dalam variabel DataFrame.
"""

df = pd.read_csv('/content/drive/MyDrive/Dicoding/10.Machine Learning Terapan/submition2/goodreads_data.csv')
df.head()

"""Mengetahui colom apa saja yang terdapat pada dataframe"""

df.columns

"""Mengetahui typedata pada setiap colom"""

df.info()

"""melihat statistik deskriptif dari dataframe"""

df.describe()

"""Mengetahui jumlah data yang sama pada dataframe"""

df.duplicated().sum()

"""Melakukan drop value [] dari colom genres"""

df = df.drop(df[df['Genres'] == '[]'].index)

"""Mengetahui apakah terdapat nilai Na"""

df.isna().sum()

"""Melakukan dropna untuk menghilangkan nilai Na"""

clean_df = df.dropna()
clean_df.isna().sum()

"""Melakukan plot dengan nilai X=rating dan Y=jumlah buku"""

rating_5 = df.Avg_Rating[(df.Avg_Rating == 5)]
rating_4 = df.Avg_Rating[(df.Avg_Rating >= 4) & (df.Avg_Rating < 5)]
rating_3 = df.Avg_Rating[(df.Avg_Rating >= 3) & (df.Avg_Rating < 4)]
rating_2 = df.Avg_Rating[(df.Avg_Rating >= 2) & (df.Avg_Rating < 3)]
rating_1 = df.Avg_Rating[(df.Avg_Rating >= 1) & (df.Avg_Rating < 2)]

x = ["5", "4", "3", "2", "1"]
y = [len(rating_5.values), len(rating_4.values), len(rating_3.values), len(rating_2.values), len(rating_1.values)]

plt.figure(figsize=(15, 6))
plt.bar(x, y, color=['red', 'green', 'blue', 'cyan', 'yellow'])
plt.title("Avg_Rating")
plt.xlabel("Rating")
plt.ylabel("Number of Book")

for i in range(len(x)):
  plt.text(i, y[i], y[i], ha='center', va='bottom')

plt.show()

"""Melihat buku dengan rating dibawah 2"""

df[df.Avg_Rating <=2 ].sort_values(by='Num_Ratings', ascending=False).head()

"""Insight yang didapatkan:
1. jumlah buku paling banyak berada pada rating 4
2. buku dengan rating paling rendah adalah They Called Me Wyatt karangan Natasha Tynes dengan rating 1.64 dengan jumlah orang yang merating berjumlah 2302
3. jumlah buku dengan rating diatas 4 berjumlah 5 buku
4. buku dengan rating dibawah 2 ternyata hanya satu buku saja yang berjudul "They Called Me Wyatt" karya Natasha Tynes

# **3. Data Prosesing**

Membuat variable baru untuk merubah dari series menjadi list
"""

book_name = clean_df['Book'].tolist()
genre = clean_df['Genres'].tolist()
rating = clean_df['Avg_Rating'].tolist()

print(len(book_name))
print(len(genre))
print(len(rating))

"""Merubah nama colom"""

new_df ={'rating':rating ,'Book':book_name, 'Genres':genre }
new_df = pd.DataFrame(new_df)
new_df.head()

tf = TfidfVectorizer()
tf.fit(new_df['Genres'])
tf.get_feature_names_out()

tfidf_matrix = tf.fit_transform(new_df['Genres'])
tfidf_matrix.shape

"""Mengubah vektor tf-idf dalam bentuk matriks dengan fungsi todense()"""

tfidf_matrix.todense()

pd.DataFrame(
    tfidf_matrix.todense(),
    columns=tf.get_feature_names_out(),
    index=new_df.Book
).sample(22, axis=1).sample(10, axis=0)

"""# **4. Modelling**"""

cosine_sim = cosine_similarity(tfidf_matrix)
cosine_sim

"""Membuat dataframe dari variabel cosine_sim dengan baris dan kolom berupa nama buku"""

cosine_sim_df = pd.DataFrame(cosine_sim, index=new_df.Book, columns=new_df.Book)
print('Shape:', cosine_sim_df.shape)
cosine_sim_df.sample(5, axis=1).sample(10, axis=0)

new_df[new_df.Book.eq('Big Fish')]

"""Rekomendasi berdasarkan nama buku dengan nilai cosine similaity 10 tertinggi"""

book = 'Big Fish'
book_index = cosine_sim_df.index.get_loc(book)
top_10 = cosine_sim_df.iloc[book_index].sort_values(ascending=False)[1:11]

print(f'Top 10 similar books to {book}:')
print(top_10)

"""# **5. Evaluation**"""

k = 10
threshold = 0.75
book_ratings = top_10.values
book_relevances = book_ratings > threshold
precision = len(book_ratings[book_relevances]) / k
print(f'The precision of the recommendation system is {precision:.1%}')

len(book_ratings[book_relevances])

"""Menjawab Pertanyaan :
1. apakah genre paling populer?
2. siapakah penulis buku dengan jumlah terbanyak? dan buku apa yang paling populer berdasarkan Num_Ratingnya?
3. buku apa yang memiliki Avg_Rating paling tinggi dengan Num_Rating diatas 2.000.000? dan buku apa yang memiliki cosine_similarity yang paling tinggi dengan buku Avg_rating tertinggi tersebut?

1. apakah genre paling populer?
"""

value_counts = df['Genres'].value_counts()
top_values = value_counts.head(5)

plt.figure(figsize=(10, 6))
sns.barplot(x=top_values.values, y=top_values.index, palette="viridis")
plt.title("10 Genre Terpopuler")
plt.xlabel("Frekuensi")
plt.ylabel("Genre")
plt.show()

"""2. siapakah penulis buku dengan jumlah terbanyak? dan buku apa yang paling populer berdasarkan Avg_Rating?"""

df.groupby('Author').count().sort_values(by='Book', ascending=False)

populer_df = df[df.Author.eq('Stephen King')]
populer_df.sort_values(by='Avg_Rating', ascending=False).head()

"""3. buku apa yang memiliki Avg_Rating paling tinggi dengan Num_Rating diatas 2.000.000? dan buku apa yang memiliki cosine_similarity yang paling tinggi dengan buku Avg_rating tertinggi tersebut?"""

df3 = df['Num_Ratings'].str.replace(',', '').astype(float)
avg_df = df.sort_values(by='Num_Ratings', ascending=False)
avg_df = avg_df[df3 > 2000000]
avg_df.head()

book2 = 'Harry Potter and the Philosopher’s Stone (Harry Potter, #1)'
book_index2 = cosine_sim_df.index.get_loc(book2)
top_10_2 = cosine_sim_df.iloc[book_index2].sort_values(ascending=False)[1:11]

print(f'Top 10 similar books to {book2}:')
print(top_10_2)

"""Menjawab Pertanyaan:

1. apakah genre paling populer?

  Genre buku paling populer adalah Fiction dan disusul oleh Fantasy dan Nonfiction.

2. siapakah penulis buku dengan jumlah terbanyak? dan buku apa yang paling populer berdasarkan Avg_Rating?

  Penulis dengan jumlah buku terbanyak adalah Stephen King dengan jumlah buku sebanyak 57 dengan buku paling tinggi nilai scorenya adalah "The Dark Tower Series: Books 1-7" dengan score 4.61 dengan jumlah orang yang memberikan review 11,431 orang.

3. buku apa yang memiliki Avg_Rating paling tinggi dengan Num_Rating diatas 500.000? dan buku apa yang memiliki cosine_similarity yang paling tinggi dengan buku Avg_rating tertinggi tersebut?

  buku dengan kriteria jumlah user yang memberikan rating diatas 2.000.000 dan memiliki rating paling baik adalah buku yang berjudul "Harry Potter and the Philosopher’s Stone (Harry Potter, #1)" karya J.K. Rowling.
  buku ini memilki cosine similarity paling tinggi dengan buku yang berjudul "The Enchanted Castle " dengan memiliki cosine similarity bernilai 1.
"""